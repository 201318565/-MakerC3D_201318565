package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER,MENORQ ,MAYORQ , 
IGUALQ , DIFERENTEQ, MAYOR_IGUAL, MENOR_IGUAL,  AND, OR , NOT , PAREN1, PAREN2;
nonterminal NodoC3D inicial, expresion, expresion2 , expresion3;


precedence left OR ;
precedence left AND;
precedence right NOT; 
precedence left MENORQ, MAYORQ , IGUALQ , DIFERENTEQ, MAYOR_IGUAL, MENOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 



start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion3:exp 
                    {: 
                        RESULT = exp;             
                        if(exp.getVerdadero()==null){
                        ControlC3D.agregarC3D("Final: "+exp.getCad());
                        } else {
                        ControlC3D.agregarC3D(exp.getCad());
                        ControlC3D.agregarC3D("\n Verdadero: "+ exp.getVerdadero());
                        ControlC3D.agregarC3D("\n Falso: " +  exp.getFalso());
                                    }
                    :}
;

expresion3   ::=expresion3:izq AND expresion3:der
                    {: 
                        String verdadero = "";
                        String falso = "";
                        String temp = ControlC3D.generaTemp();
                        String c3d =izq.getCad() + "\n"+izq.getVerdadero()+":\n" + der.getCad() + "\n";
                        if(der.getVerdadero()==null){
                        verdadero =izq.getVerdadero();
                        falso = izq.getFalso();
                        }else{
                        verdadero =der.getVerdadero();
                        falso = izq.getFalso() +","+ der.getFalso()  ;
                        }
                        RESULT = new NodoC3D(c3d,verdadero,falso); 
                    :}
                    | expresion3:izq OR expresion3:der
                    {: 
                        String verdadero = "";
                        String falso = "";
                        String temp = ControlC3D.generaTemp();
                        String c3d =izq.getCad() + "\n"+izq.getFalso()+":\n" + der.getCad() + "\n";
                        if(der.getVerdadero()==null){
                        verdadero =izq.getVerdadero();
                        falso = izq.getFalso();
                        }else{
                        verdadero =izq.getVerdadero()+","+der.getVerdadero();
                        falso =  der.getFalso()  ;
                        }
                        RESULT = new NodoC3D(c3d,verdadero,falso); 
                    :}
                     |  NOT expresion3:der
                    {: 
                        String aux = "";
                        String verdadero = "";
                        String falso = "";
                        aux = der.getFalso();
                        verdadero = der.getFalso();
                        falso = der.getVerdadero();
                        String c3d =der.getCad();
                        RESULT = new NodoC3D(c3d,verdadero,falso); 


                    :}
                    | expresion2:a {:
                        RESULT =a;
                     :}
;
/********************************************************* RELACIONALES ********************************************/
expresion2   ::= expresion2:izq MENORQ expresion2:der
                    {: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " < " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 

                    :}
            | expresion2:izq MAYORQ expresion2:der{: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " > " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 
                    :}
            | expresion2:izq IGUALQ expresion2:der{: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " == " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 
                    :}
             | expresion2:izq DIFERENTEQ expresion2:der{: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " != " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 
                    :}
            | expresion2:izq MAYOR_IGUAL expresion2:der{: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " >= " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 
                    :}
            | expresion2:izq MENOR_IGUAL expresion2:der{: 
                String etiq1=ControlC3D.etiquetaFV();
                String etiq2=ControlC3D.etiquetaFV();
                String c3d = " if( " + izq.getCad() + " <= " + der.getCad() + ") goto  " +etiq1+":\n got  " +etiq2+";";
                RESULT = new NodoC3D(c3d, etiq1,etiq2); 
                    :}
            | expresion:a {:
                        RESULT =a;
                     :}

;

/*___________________________________________________ ARITMETICAS ___________________________________________________*/
expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion3:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {:  RESULT = new NodoC3D(entero); 
                      :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}

          
            ;